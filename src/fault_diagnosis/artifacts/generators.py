"""Artifact generation for the fault diagnosis workflow."""
from __future__ import annotations

import json
from pathlib import Path
from typing import Dict, Iterable, List, Sequence

from ..shared.files import ensure_dir, write_json, write_lines, write_text

from ..agents.crew import Hypothesis


def write_rag_index(session_dir: Path, index_payload: Sequence[Dict[str, str]]) -> Path:
    path = session_dir / "rag_index.json"
    write_json(path, {"fixtures": list(index_payload)})
    return path


def write_alert_context(session_dir: Path, alert: Dict[str, object]) -> Path:
    path = session_dir / "alert_context.json"
    write_json(path, alert)
    return path


def write_log_bundle(session_dir: Path, alert: Dict[str, object]) -> Path:
    path = session_dir / "log_bundle.json"
    logs = {
        "alert_id": alert.get("alert_id"),
        "entries": [
            {
                "timestamp": "2024-05-18T14:55:07Z",
                "source": "traffic_probe_agent",
                "message": "Packet loss exceeded 12% threshold (p95 latency 165ms)",
            },
            {
                "timestamp": "2024-05-18T14:58:12Z",
                "source": "noc_sentinel",
                "message": "Escalated congestion advisory to RF specialists",
            },
        ],
    }
    write_json(path, logs)
    return path


def write_topology_view(session_dir: Path, topology: Dict[str, object]) -> Path:
    path = session_dir / "topology_view.json"
    write_json(path, topology)
    return path


def write_hypothesis_board(session_dir: Path, hypotheses: Sequence[Hypothesis]) -> Path:
    path = session_dir / "hypothesis_board.md"
    lines: List[str] = ["# Fault Diagnosis Hypothesis Board", ""]
    for hypothesis in hypotheses:
        lines.append(f"## Hypothesis {hypothesis.index} — {hypothesis.verdict}")
        lines.append(f"Confidence: {hypothesis.confidence:.2f}")
        lines.append(f"Statement: {hypothesis.statement}")
        lines.append(f"Citation: {hypothesis.citation}")
        lines.append("")
    write_lines(path, lines)
    return path


def write_validation_trace(session_dir: Path, hypotheses: Sequence[Hypothesis]) -> Path:
    path = session_dir / "validation_trace.json"
    trace = []
    for hypothesis in hypotheses:
        trace.append(
            {
                "hypothesis": hypothesis.index,
                "statement": hypothesis.statement,
                "verdict": hypothesis.verdict,
                "citation": hypothesis.citation,
            }
        )
    write_json(path, {"validations": trace})
    return path


def write_remediation_plan(session_dir: Path, plan_lines: Iterable[str]) -> Path:
    path = session_dir / "remediation_plan.md"
    write_lines(path, ["# Remediation Plan", "", *plan_lines])
    return path


def write_report(session_dir: Path, hypotheses: Sequence[Hypothesis], citations: Sequence[str]) -> List[Path]:
    html_path = session_dir / "fault_diagnosis_report.html"
    pdf_path = session_dir / "fault_diagnosis_report.pdf"
    html_content = [
        "<html>",
        "  <head><title>Fault Diagnosis Report</title></head>",
        "  <body>",
        "    <h1>Fault Diagnosis Report</h1>",
        "    <p>This deterministic demo run highlights how grounded reasoning leads to remediation recommendations.</p>",
        "    <h2>Hypotheses</h2>",
    ]
    for hypothesis in hypotheses:
        html_content.append(f"    <h3>Hypothesis {hypothesis.index} — {hypothesis.verdict}</h3>")
        html_content.append(f"    <p><strong>Confidence:</strong> {hypothesis.confidence:.2f}</p>")
        html_content.append(f"    <p>{hypothesis.statement}</p>")
        html_content.append(f"    <p><em>Citation:</em> {hypothesis.citation}</p>")
    html_content.append("    <h2>Citations</h2>")
    html_content.append("    <ul>")
    for citation in citations:
        html_content.append(f"      <li>{citation}</li>")
    html_content.extend(["    </ul>", "  </body>", "</html>"])
    write_lines(html_path, html_content)

    pdf_stub = "%PDF-1.4\n% Deterministic placeholder PDF generated by telecom_ops demo.\n"
    write_text(pdf_path, pdf_stub)
    return [html_path, pdf_path]


def write_manifest(session_dir: Path, artifact_paths: Sequence[Path]) -> Path:
    """Persist a manifest describing artifacts generated during the run."""
    path = session_dir / "manifest.json"
    normalized = [str(item) for item in artifact_paths]
    write_json(path, {"artifacts": normalized})
    return path


def write_synthetic_data(base_dir: Path, session_name: str, payload: Dict[str, object]) -> Path:
    ensure_dir(base_dir)
    path = base_dir / f"fault_diagnosis_{session_name}.json"
    write_json(path, payload)
    return path


def write_plot_placeholders(base_dir: Path) -> List[Path]:
    ensure_dir(base_dir)
    plot_paths = [
        base_dir / "traffic_load_trend.txt",
        base_dir / "latency_p95_trend.txt",
        base_dir / "packet_loss_trend.txt",
    ]
    ascii_chart = "# Placeholder plot generated by telecom_ops demo\nTrend is rendered during full implementation.\n"
    for path in plot_paths:
        write_text(path, ascii_chart)
    return plot_paths


__all__ = [
    "write_rag_index",
    "write_alert_context",
    "write_log_bundle",
    "write_topology_view",
    "write_hypothesis_board",
    "write_validation_trace",
    "write_remediation_plan",
    "write_report",
    "write_manifest",
    "write_synthetic_data",
    "write_plot_placeholders",
]
